// Generated by CoffeeScript 1.9.1

/*
 * file: datarenderer.coffee ----------------------------------------------------------------------
#
 * Class to render data on html page.
#
 * The main method : render(data), get_html(data)
#-------------------------------------------------------------------------------------------------
 */

(function() {
  var GovSelector, LayoutRenderer, get_record, gov_selector, renderData,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LayoutRenderer = (function() {
    function LayoutRenderer() {}

    LayoutRenderer.list = function() {
      return ['simple'];
    };

    return LayoutRenderer;

  })();

  renderData = function(html_container, data) {
    var makeDocHtml;
    makeDocHtml = function(data) {
      var makeFieldHtml, n, ss;
      makeFieldHtml = function(n, v) {
        var link, s;
        link = function(v) {
          if (('' + v).indexOf('http://') === -1) {
            return v;
          } else {
            return '<a target="_blank" href="' + v + '">' + v + '</a>';
          }
        };
        s = '';
        if (v) {
          s = "<p><span class='f-nam'>" + fieldNames[n] + "</span><span class='f-val'>" + (link(v)) + "</span></p>";
        }
        return s;
      };
      ss = '';
      for (n in data) {
        ss += makeFieldHtml(n, data[n]);
      }
      return ss;
    };
    return $(html_container).html(makeDocHtml(data));
  };

  $.ajax({
    url: 'js/fieldnames.js',
    dataType: 'script',
    cache: true,
    success: function(data) {
      console.log("field names loaded:");
    }
  });

  GovSelector = (function() {
    var get_regs, strip;

    GovSelector.prototype.on_selected = function(evt, data, name) {};

    function GovSelector(html_selector, docs_url) {
      this.html_selector = html_selector;
      this.startSuggestion = bind(this.startSuggestion, this);
      $.ajax({
        url: docs_url,
        dataType: 'json',
        cache: true,
        success: this.startSuggestion
      });
    }

    GovSelector.prototype.substringMatcher = function(docs) {
      return function(q, cb) {
        var matches, substrRegex;
        matches = void 0;
        substrRegex = void 0;
        matches = [];
        substrRegex = new RegExp(q, 'i');
        $.each(docs, function(i, d) {
          if (substrRegex.test(d.gov_name)) {
            matches.push(d);
            if (matches.length >= 10) {
              return false;
            }
          }
        });
        cb(matches);
      };
    };

    GovSelector.prototype.substringMatcher1 = function(docs) {
      return function(q, cb) {
        var d, gn, j, len, matches, regs, test_string;
        test_string = function(s, regs) {
          var j, len, r;
          for (j = 0, len = regs.length; j < len; j++) {
            r = regs[j];
            if (!r.test(s)) {
              return false;
            }
          }
          return true;
        };
        regs = get_regs(q);
        matches = [];
        for (j = 0, len = docs.length; j < len; j++) {
          d = docs[j];
          if (matches.length >= 10) {
            break;
          }
          if (test_string(d.gov_name, regs)) {
            gn = d.gov_name;
            matches.push(d);
          }
        }
        cb(matches);
      };
    };

    strip = function(s) {
      return s.replace(/<[^<>]*>/g, '');
    };

    get_regs = function(str) {
      var tr, words;
      tr = function(s) {
        var ss;
        ss = s.trim('' + s);
        return ss = ss.replace(/ +/g, ' ');
      };
      words = tr(str).split(' ');
      return words.map(function(w) {
        return new RegExp(w, 'i');
      });
    };

    GovSelector.prototype.suggestionTemplate = Handlebars.compile("<p><span class=\"minwidth\">{{gov_name}}</span> \n<span class=\"smaller\">{{state}} &nbsp;{{gov_type}}</span>\n</p>");

    GovSelector.prototype.startSuggestion = function(govs) {
      $(this.html_selector).attr('placeholder', 'GOVERNMENT NAME');
      $(this.html_selector).typeahead({
        hint: true,
        highlight: true,
        minLength: 1
      }, {
        name: 'gov_name',
        displayKey: 'gov_name',
        source: this.substringMatcher1(govs),
        templates: {
          suggestion: this.suggestionTemplate
        }
      }).on('typeahead:selected', this.on_selected);
    };

    return GovSelector;

  })();


  /*
  file: main.coffe -- The entry -----------------------------------------------------------------------------------
  
  gov_finder = new GovFinder
  gov_details = new GovDetails
  gov_finder.on_select = gov_details.show
  -----------------------------------------------------------------------------------------------------------------
   */

  gov_selector = new GovSelector('.typeahead', 'data/h_types.json');

  gov_selector.on_selected = function(evt, data, name) {
    renderData('#details', data);
    get_record("inc_id:" + data["inc_id"]);
  };

  get_record = function(query) {
    return $.ajax({
      url: "https://api.mongolab.com/api/1/databases/govwiki/collections/govs/?q={" + query + "}&f={_id:0}&l=1&apiKey=0Y5X_Qk2uOJRdHJWJKSRWk6l6JqVTS2y",
      dataType: 'json',
      cache: true,
      success: function(data) {
        if (data.length) {
          renderData('#details', data[0]);
        }
      }
    });
  };

}).call(this);

//# sourceMappingURL=b.js.map
